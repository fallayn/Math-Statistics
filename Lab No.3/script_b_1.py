import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
from matplotlib import rc

# Настройка шрифтов для поддержки кириллицы
rc('font', family='DejaVu Sans')

# Выборка B
data_b = np.array([
    -64, 5, -53, -29, -61, -49, -1, -22, -25, -38, -73, -20, -8, -37, -47, 0, -37, -50, -46, -13, 7, -13, -42,
    -1, -44, -27, -20, -33, -37, -30, -20, -73, -57, -40, -4, -40, -83, -33, -37, -26, -79, -16, -77, -5, -51,
    -28, -63, -24, -25, -24, -38, 16, -37, -15, 29, -11, -14, -34, -31, -23, -16, -58, -73, -43, -31, -65,
    -12, -4, -38, -25, -31, -7, -9, -60, -61, -47, -46, -33, -15, -79, -48, 1, -62, -14, -49, -31, -25, -33,
    -38, -27, -51, -30, -43, -64, -24, -50, -22, -37, -6, -11, -78, -51, -1, -9, -34, 1, -17, -33, 11, -54,
    -31, -34, -38, -22, -2, -9, -15, -6, -87, -45, -22, -30, -15, -30, -18, -77, 6, -47, -33, -21, -86, -31,
    -45, -43, -19, -36, -46, -69, -22, -59, -30, -22, 5, -29, -42, -47, 5, -17, -71, -36, 6, -6, -7, -41, -37,
    -11, -11, -65, -36, -58, -36, -30, -46, -15, -49, -88, -12, -8, -83, -13, -30, -48, -66, -9, -31, -13, -32,
    -21, -47, -50, -25, -6, -31, -75, -48, -77, -13, -55, -26, -9, -32, -41, -68, -55, -53, 25, -77, 1, -65,
    -35, -51, -24, -42
])

# Параметры
alpha = 0.05
n = len(data_b)

# =============================================================================
# 2.1 Проверка гипотез о распределении (критерий Колмогорова)
# =============================================================================

# Гипотеза 1: Нормальное распределение
mu_norm = -33.22
sigma_norm = 23.389

# Гипотеза 2: Распределение χ² (хи-квадрат)
# Параметр: k = 273.5 (из отчета)

# Проверка нормального распределения
sorted_data = np.sort(data_b)
ecdf = np.arange(1, n + 1) / n  # Эмпирическая функция распределения

# Теоретическая CDF для нормального распределения
norm_cdf = stats.norm.cdf(sorted_data, loc=mu_norm, scale=sigma_norm)

# Статистика Колмогорова
Dn_norm = np.max(np.abs(ecdf - norm_cdf))
critical_value = 1.36 / np.sqrt(n)  # Для α = 0.05

# Проверка распределения χ²
# Поскольку распределение χ² определено только для x >= 0, а в выборке есть отрицательные значения,
# гипотеза автоматически отвергается
k_chi2 = 273.5
Dn_chi2 = None
reject_chi2 = True

# Вывод результатов
print("="*80)
print("2.1 Проверка гипотез о распределении (критерий Колмогорова)")
print("="*80)

print("\nГипотеза 1: Нормальное распределение (μ = -33.22, σ = 23.389)")
print(f"Статистика Dn: {Dn_norm:.6f}")
print(f"Критическое значение (α={alpha}): {critical_value:.6f}")
print(f"Вывод: Гипотеза {'отвергается' if Dn_norm > critical_value else 'не отвергается'}")

print("\nГипотеза 2: Распределение χ² (k = 273.5)")
print("Причина: распределение χ² определено только для x ≥ 0")
print(f"Минимальное значение в выборке: {np.min(data_b)}")
print("Вывод: Гипотеза отвергается (не соответствует области определения распределения)")

# =============================================================================
# 2.2 Вывод о наилучшем распределении
# =============================================================================
print("\n" + "="*80)
print("2.2 Вывод о наилучшем распределении")
print("="*80)
print("Нормальное распределение лучше соответствует данным, так как:")
print("- Гипотеза о нормальном распределении не отвергается (Dn < критического значения)")
print("- Распределение χ² принципиально не подходит для данных с отрицательными значениями")
print("- Нормальное распределение является естественным выбором для данных, которые могут принимать как положительные, так и отрицательные значения")

# =============================================================================
# Визуализация
# =============================================================================
plt.figure(figsize=(14, 10))

# Гистограмма и теоретические распределения
plt.subplot(2, 1, 1)
hist = plt.hist(data_b, bins=30, density=True, alpha=0.7, color='skyblue', edgecolor='black', label='Гистограмма данных')

# Нормальное распределение
x = np.linspace(np.min(data_b), np.max(data_b), 1000)
plt.plot(x, stats.norm.pdf(x, mu_norm, sigma_norm), 'r-', lw=2, label=f'Нормальное (μ={mu_norm}, σ={sigma_norm})')

# Распределение χ² (только для положительных значений)
x_chi2 = np.linspace(0, np.max(data_b), 1000)
plt.plot(x_chi2, stats.chi2.pdf(x_chi2, k_chi2), 'g--', lw=2, label=f'χ² (k={k_chi2})')

plt.title('Сравнение распределений для выборки B')
plt.xlabel('Значение')
plt.ylabel('Плотность вероятности')
plt.legend()
plt.grid(True)

# График критерия Колмогорова для нормального распределения с ЭФР в стиле main2.py
plt.subplot(2, 1, 2)

# Создаем интервалы для ЭФР (как в main2.py)
x_min = np.min(data_b)
x_max = np.max(data_b)
R = x_max - x_min
k_intervals = 12
h = R / k_intervals
bins = np.linspace(x_min - h/2, x_max + h/2, k_intervals + 1)

# Рассчитываем значения ЭФР на границах интервалов
ecdf_values = [np.sum(data_b <= x) / n for x in bins]

# Построение ЭФР с горизонтальными линиями и стрелками
for i in range(len(bins) - 1):
    x_start = bins[i]
    x_end = bins[i + 1]
    y = ecdf_values[i]
    
    # Горизонтальная линия
    plt.hlines(y, xmin=x_start, xmax=x_end, colors='blue', linewidth=1.5)
    
    # Стрелка в начале отрезка
    if i < len(bins) - 2:  # Не рисуем стрелку для последнего сегмента
        plt.annotate(
            '',
            xy=(x_start + 0.3, y),
            xytext=(x_start, y),
            arrowprops=dict(arrowstyle='<-', color='blue', lw=1.5),
            annotation_clip=False
        )


# Теоретическая ФР (нормальное распределение)
plt.plot(sorted_data, norm_cdf, 'g-', lw=2, label='Теоретическая ФР (нормальное)')

# Отметить максимальное расхождение
idx_max = np.argmax(np.abs(ecdf - norm_cdf))
plt.plot([sorted_data[idx_max], sorted_data[idx_max]], 
         [ecdf[idx_max], norm_cdf[idx_max]], 'ko-', lw=2, label=f'Макс. расхождение (Dn={Dn_norm:.4f})')

plt.title(f'Критерий Колмогорова: Dn = {Dn_norm:.4f} < {critical_value:.4f} (крит.)')
plt.xlabel('Значение')
plt.ylabel('Функция распределения')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

# =============================================================================
# Дополнительная проверка: расчет параметров
# =============================================================================
print("\n" + "="*80)
print("Проверка параметров распределений")
print("="*80)
print(f"Вычисленное среднее: {np.mean(data_b):.6f} (в отчете: -33.22)")
print(f"Вычисленная исправленная дисперсия: {np.var(data_b, ddof=1):.6f} (в отчете: {sigma_norm**2:.6f})")
print(f"Вычисленное стандартное отклонение: {np.std(data_b, ddof=1):.6f} (в отчете: 23.389)")